/* 
 * This source file is part of MEMU: Mips EMUlator
 * by Pengyu CHEN(cpy.prefers.you@gmail.com)
 * COPYLEFT, ALL WRONGS RESERVED.
 */

#ifndef DECODE_H
#define DECODE_H

#include "memu.h"

enum /* bit 15..0 in 32 */
{
    INST_NONE,
    INST_ABS_FMT,
    INST_ADD,
    INST_ADDI,
    INST_ADDIU,
    INST_ADDR_PS,
    INST_ADDU,
    INST_ADD_FMT,
    INST_ALNV_PS,
    INST_AND,
    INST_ANDI,
    INST_BC1,
    INST_BC1ANY2,
    INST_BC1ANY4,
    INST_BC2,
    INST_BEQ,
    INST_BEQL,
    INST_BGEZ,
    INST_BGEZAL,
    INST_BGEZALL,
    INST_BGEZL,
    INST_BGTZ,
    INST_BGTZL,
    INST_BLEZ,
    INST_BLEZL,
    INST_BLTZ,
    INST_BLTZAL,
    INST_BLTZALL,
    INST_BLTZL,
    INST_BNE,
    INST_BNEL,
    INST_BREAK,
    INST_CACHE,
    INST_CEIL_L_FMT,
    INST_CEIL_W_FMT,
    INST_CFC1,
    INST_CFC2,
    INST_CLO,
    INST_CLZ,
    INST_CTC1,
    INST_CTC2,
    INST_CVT_D_FMT,
    INST_CVT_L_FMT,
    INST_CVT_PS_PW,
    INST_CVT_PS_S,
    INST_CVT_PW_PS,
    INST_CVT_S_FMT,
    INST_CVT_S_PL,
    INST_CVT_S_PU,
    INST_CVT_W_FMT,
    INST_C_EQ_FMT,
    INST_C_F_FMT,
    INST_C_LE_FMT,
    INST_C_LT_FMT,
    INST_C_NGE_FMT,
    INST_C_NGL_FMT,
    INST_C_NGLE_FMT,
    INST_C_NGT_FMT,
    INST_C_OLE_FMT,
    INST_C_OLT_FMT,
    INST_C_SEQ_FMT,
    INST_C_SF_FMT,
    INST_C_UEQ_FMT,
    INST_C_ULE_FMT,
    INST_C_ULT_FMT,
    INST_C_UN_FMT,
    INST_DERET,
    INST_DIV,
    INST_DIVU,
    INST_DIV_FMT,
    INST_ERET,
    INST_EXT,
    INST_FLOOR_L_FMT,
    INST_FLOOR_W_FMT,
    INST_INS,
    INST_J,
    INST_JAL,
    INST_JALR,
    INST_JALX,
    INST_JR,
    INST_LB,
    INST_LBU,
    INST_LDC1,
    INST_LDC2,
    INST_LDXC1,
    INST_LH,
    INST_LHU,
    INST_LL,
    INST_LUI,
    INST_LUXC1,
    INST_LW,
    INST_LWC1,
    INST_LWC2,
    INST_LWL,
    INST_LWR,
    INST_LWXC1,
    INST_MADD,
    INST_MADDU,
    INST_MADD_D,
    INST_MADD_PS,
    INST_MADD_S,
    INST_MFC0,
    INST_MFC1,
    INST_MFC2,
    INST_MFHC1,
    INST_MFHC2,
    INST_MFHI,
    INST_MFLO,
    INST_MFMC0,
    INST_MOVF,
    INST_MOVF_FMT,
    INST_MOVN,
    INST_MOVN_FMT,
    INST_MOVT,
    INST_MOVT_FMT,
    INST_MOVZ,
    INST_MOVZ_FMT,
    INST_MOV_FMT,
    INST_MSUB,
    INST_MSUBU,
    INST_MSUB_D,
    INST_MSUB_PS,
    INST_MSUB_S,
    INST_MTC0,
    INST_MTC1,
    INST_MTC2,
    INST_MTHC1,
    INST_MTHC2,
    INST_MTHI,
    INST_MTLO,
    INST_MUL,
    INST_MULR_PS,
    INST_MULT,
    INST_MULTU,
    INST_MUL_FMT,
    INST_NEG_FMT,
    INST_NMADD_D,
    INST_NMADD_PS,
    INST_NMADD_S,
    INST_NMSUB_D,
    INST_NMSUB_PS,
    INST_NMSUB_S,
    INST_NOR,
    INST_OR,
    INST_ORI,
    INST_PLL_PS,
    INST_PLU_PS,
    INST_PREF,
    INST_PREFX,
    INST_PUL_PS,
    INST_PUU_PS,
    INST_RDHWR,
    INST_RDPGPR,
    INST_RECIP_FMT,
    INST_RECIP1,
    INST_RECIP2,
    INST_ROTR,
    INST_ROTRV,
    INST_ROUND_L_FMT,
    INST_ROUND_W_FMT,
    INST_RSQRT_FMT,
    INST_RSQRT1,
    INST_RSQRT2,
    INST_SB,
    INST_SC,
    INST_SDBBP,
    INST_SDC1,
    INST_SDC2,
    INST_SDXC1,
    INST_SEB,
    INST_SEH,
    INST_SH,
    INST_SLL,
    INST_SLLV,
    INST_SLT,
    INST_SLTI,
    INST_SLTIU,
    INST_SLTU,
    INST_SQRT_FMT,
    INST_SRA,
    INST_SRAV,
    INST_SRL,
    INST_SRLV,
    INST_SUB,
    INST_SUBU,
    INST_SUB_FMT,
    INST_SUXC1,
    INST_SW,
    INST_SWC1,
    INST_SWC2,
    INST_SWL,
    INST_SWR,
    INST_SWXC1,
    INST_SYNC,
    INST_SYNCI,
    INST_SYSCALL,
    INST_TEQ,
    INST_TEQI,
    INST_TGE,
    INST_TGEI,
    INST_TGEIU,
    INST_TGEU,
    INST_TLBP,
    INST_TLBR,
    INST_TLBWI,
    INST_TLBWR,
    INST_TLT,
    INST_TLTI,
    INST_TLTIU,
    INST_TLTU,
    INST_TNE,
    INST_TNEI,
    INST_TRUNC_L_FMT,
    INST_TRUNC_W_FMT,
    INST_WAIT,
    INST_WRPGPR,
    INST_WSBH,
    INST_XOR,
    INST_XORI,
    NUM_OF_INST,
};

enum /* bit 15..0 in 32 */
{
    COP0_CO = NUM_OF_INST + 1, 
    COP1_D,
    COP1_L,
    COP1_MOVCF,
    COP1_PS,
    COP1_S,
    COP1_W,
    COP2_C2,
    OP_COP0,
    OP_COP1,
    OP_COP1X,
    OP_COP2,
    OP_REGIMM,
    OP_SPECIAL,
    OP_SPECIAL2,
    OP_SPECIAL3,
    SPECIAL3_BSHFL,
    SPECIAL_MOVCI,
    SPECIAL_SRL,
    SPECIAL_SRLV,
};

enum /* bit 31..16 in 32 */
{
    SYMBOL_NONE = 0,
    SYMBOL_ASTEROID = 1u << 16,
    SYMBOL_LBETA    = 1u << 17,
    SYMBOL_LDELTA   = 1u << 18,
    SYMBOL_LEPSILON = 1u << 19,
    SYMBOL_LOPLUS   = 1u << 20,
    SYMBOL_LPHI = 1u << 21,
    SYMBOL_LSIGMA   = 1u << 22,
    SYMBOL_LTHETA   = 1u << 23,
    SYMBOL_OPLUS    = 1u << 24,
    SYMBOL_UDELTA   = 1u << 25,
};

#define MASK_31_26  0xFC000000
#define MASK_31_16  0xFFFF0000
#define MASK_25_21  0x03E00000
#define MASK_21_21  0x00200000
#define MASK_20_16  0x001F0000
#define MASK_16_16  0x00010000
#define MASK_15_0   0x0000FFFF
#define MASK_6_6    0x00000040
#define MASK_5_0    0x0000003F  

extern u32_t decode(u32_t code);

#endif // DECODE_H
