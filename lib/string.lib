.inc "../inc/pseudo_inst.inc"
.inc "../inc/regulation.inc"

#arg: dst, src, word_cnt
#ret: dst mem address, -1 on failed
#note: dst and src must be aligned and should not overlap
.decl func {
MEMWORDCPY:
    #check if aligned
    bnaln $a0, MWCPERR
    bnaln $a1, MWCPERR
    #check if overlap
    sll $t0, $a2, 2
    sovlp $t1, $a0, $a1, $t0
    bne $t1, $zero, MWCPERR
MWCP1:
    beq $a2, $zero, MWCPSUCC
    lw $t0, 0($a1)
    sw $t0, 0($a0)
    addi $a0, $a0, 4
    addi $a1, $a1, 4
    addi $a2, $a2, -1
    j MWCP1
MWCPSUCC:
    and $v0, $zero, $zero
    j MWCPEND
MWCPERR:
    addi $v0, $zero, -1
MWCPEND:
    jr $ra
}

.decl func {
MEMCPY:

}

.decl func {
STRCPY: #dst, src
SCPLP:
    #must be aligned
    bnaln $a0, SCPERR
    bnaln $a1, SCPERR
    #since 4 bytes per char
    lw $t0, 0($a1)
    beq $t0, $zero, SCPEND
    sw $t0, 0($a0)
    addi $a0, $a0, CHAR_SIZE
    addi $a1, $a1, CHAR_SIZE
    j SCPLP

SCPERR:
    .1  #errcode
    j SCPERR
    
SCPEND:
    jr $ra
}

.decl func {
MEMCMP: #str1, str2, size
    and $t0, $zero, $zero
    and $t1, $zero, $zero
    #eliminate same substrings using lw, sw
MCMP1:
    addi $a2, $a2, -4
    blt $a2, $zero, MCMP2
    lw $t0, 0($a0)
    lw $t1, 0($a1)
    bne $t0, $t1, MCMP2
    addi $a0, $a0, 4
    addi $a1, $a1, 4
    j MCMP1
MCMP2:
    addi $a2, $a2, 4
MCMP3:
    beq $a2, $zero, MCMPEND
    lb $t0, 0($a0)
    lb $t1, 0($a1)
    addi $a0, $a0, 1
    addi $a1, $a1, 1
    addi $a2, $a2, -1
    beq $t0, $t1, MCMP3

MCMPEND:
    sub $v0, $t0, $t1
    jr $ra
}

.decl func {
STRNCMP: #dst, src, n
    bnaln $a0, SNCMPERR
    bnaln $a1, SNCMPERR
    and $t0, $zero, $zero
    and $t1, $zero, $zero
    
SNCMPLP:
    beq $a2, $zero, SNCMPEND
    lw $t0, 0($a1)      #since 4 bytes per char
    andi $t0, $t0, 0xff
    beq $t0, $zero, SNCMPEND
    lw $t1, 0($a0)
    andi $t1, $t1, 0xff
    beq $t1, $zero, SNCMPEND
    bne $t0, $t1, SNCMPEND
    addi $a0, $a0, CHAR_SIZE
    addi $a1, $a1, CHAR_SIZE
    addi $a2, $a2, -1
    j SNCMPLP

SNCMPERR:
    .2 #don't know how to handle, errcode 2
    j SNCMPERR
    
SNCMPEND:
    sub $v0, $t0, $t1
    jr $ra
}

.decl func {
STRCMP: #str1, str2
    
SCMPLP:
    lw $t0, 0($a0)
    andi $t0, $t0, 0xff
    lw $t1, 0($a1)
    andi $t1, $t1, 0xff
    addi $a0, $a0, CHAR_SIZE
    addi $a1, $a1, CHAR_SIZE
    beq $t0, $t1, SCMP1
    j SCMPEND
SCMP1:
    bne $t0, $zero, SCMPLP
SCMPEND:
    sub $v0, $t0, $t1
    jr $ra
}

.decl func {
MEMWORDSET: #dst, value, words
MWST1:
    #check align
    beq $a2, $zero, MWSTEND
    sw $a1, 0($a0)
    addi $a0, $a0, 4
    addi $a2, $a2, -1
    j MWST1
MWSTEND:
    jr $ra
}

.decl func {
MEMSET: #pt, value, size
    addi $sp, $sp, -16
    sw $ra, 0($sp)
    
    beq $a2, $zero, MSTEND
    #align
    srl $t0, $a0, 2
    sll $t0, $t0, 2
    beq $t0, $a0, MST2
    sub $t0, $t0, $a0
    addi $t0, $t0, 4
MST1:
    sb $a1, 0($a0)
    addi $a0, $a0, 1
    addi $a2, $a2, -1
    beq $a0, $t0, MST2
    beq $a2, $zero, MSTEND
    j MST1
    
    #set words
MST2:
    sw $a0, 4($sp)
    sw $a1, 8($sp)
    sw $a2, 12($sp)
    sll $t0, $a1, 8
    or $t0, $t0, $a1
    sll $a1, $t0, 16
    or $a1, $a1, $t0
    srl $a2, $a2, 2
    jal MEMWORDSET
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    lw $a2, 12($sp)
    
    #set remain
MST3:
    beq $a2, $zero, MSTEND
    sb $a1, 0($a0)
    addi $a0, $a0, 1
    addi $a2, $a2, -1
    j MST3
MSTEND:
    lw $ra, 0($sp)
    addi $sp, $sp, 16
    jr $ra
}

.decl func {
STRLEN:
    and $v0, $zero, $zero
STRLENLP:
    lw $t0, 0($a0)
    andi $t0, $t0, 0xff
    beq $t0, $zero, STRLENEND
    addi $a0, $a0, CHAR_SIZE
    addi $v0, $v0, 1
    j STRLENLP
STRLENEND:
    jr $ra
}
