.inc "string.lib"
.inc "proc.inc"

.def CUR_PROC_OFF {0}
.def MAX_PROC_OFF {4}
.def PROC_INFO_OFF {8}
.static {
PROC:
CUR_PROC:
    .0
MAX_PROC:
    .0
PROC_INFO:
    .inc "procinfo.b"
REGS_BUF:
    .dup 36 .0  #32w:gpr, 1w:epc, 1w:hi, 1w:lo, 1w:reserved
}

#store registers to REGS_BUF
.def cache_regs {
    wrpgpr $fp, $fp
    lla $fp, REGS_BUF
    #store gpr
    .loop 0 31 /
    sw $<LOOPVAR>, 0($fp)
    addi $fp, $fp, 4
    /
    wrpgpr $at, $at
    #store epc, hi, lo
    mfc0 $at, $1
    sw $at, 0($fp)
    addi $fp, $fp, 4
    mfhi $at
    sw $at, 0($fp)
    addi $fp, $fp, 4
    mflo $at
    sw $at, 0($fp)
    
    lla $at, REGS_BUF
    rdpgpr $fp, $fp
    sw $fp, 120($at)
    rdpgpr $at, $at
}

.decl func scope(syscall.lib) {
FLUSH_REGS:
    addi $sp, $sp, -4
    sw $ra, 0($sp)
    #suppose gpr is already stored in REGS_BUF by shade_gpr
    SETFRMLB PROC
    #dst: a0=proc_info + cur_proc * 64 + 8word
    #note!!!: gdt may change in the future
    addi $a0, $fp, PROC_INFO_OFF
    lw $t0, CUR_PROC_OFF($fp)
    sll $t0, $t0, 8     #64 * 4 bytes
    add $a0, $a0, $t0
    #NOTE!!: size of gdt may change in the future
    addi $a0, $a0, 32   # +8word to regs
    #src: a1 = regs_buf
    lla $a1, REGS_BUF
    #word_cnt: a2 = 35, including gpr, epc, hi, lo
    ori $a2, $zero, 35

    jal MEMWORDCPY

    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra
}

#load regs from REGS_BUF
.def restore_regs {
    lla $31, REGS_BUF
    #restore epc, hi, lo
    lw $t0, 128($31)
    mtc0 $t0, $1
    lw $t0, 132($31)
    mthi $t0
    lw $t0, 136($31)
    mtlo $t0
    #restore gpr
    .loop 0 30 /
    lw $<LOOPVAR>, 0($31)
    addi $31, $31, 4
    /
    wrpgpr $t0, $t0
    lla $t0, REGS_BUF
    lw $31, 124($t0)
    rdpgpr $t0, $t0
}

.decl func scope() {
FETCH_REGS:
    addi $sp, $sp, -4
    sw $ra, 0($sp)

    SETFRMLB PROC
    #dst: a0 = regs_buf
    lla $a0, REGS_BUF
    #src: a1=proc_info + cur_proc * 64 + 8words
    #NOTE!!: size of gdt may change in the future
    addi $a1, $fp, PROC_INFO_OFF
    lw $t0, CUR_PROC_OFF($fp)
    sll $t0, $t0, 8     #64 * 4 bytes
    add $a1, $a1, $t0
    #NOTE!!: size of gdt may change in the future
    addi $a1, $a1, 32
    #word_cnt: a2 = 35, including gpr, epc, hi, lo
    ori $a2, $zero, 35
    
    jal MEMWORDCPY

    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra
}

.decl func scope(interrupt.lib) {
PROC_SCHEDULE:
    addi $sp, $sp, -8
    sw $s0, 4($sp)
    sw $ra, 0($sp)
    
    SETFRMLB PROC
    addi $t0, $fp, PROC_INFO_OFF
    lw $t3, MAX_PROC_OFF($fp)
    #NOTE!!!: gdt size may be changed in the future
    sll $t3, $t3, 8     #max_proc * 64 * 4
    
    lw $t1, CUR_PROC_OFF($fp)
    #NOTE!!!: gdt size may be changed in the future
    sll $t1, $t1, 8
PRC_SCHD1:
    #move to next process
    addi $t1, $t1, 64 * 4
    ble $t1, $t3, PRC_SCHD2
    and $t1, $zero, $zero
PRC_SCHD2:
    addi $t3, $fp, PROC_INFO_OFF
    #get process state
    add $t2, $t3, $t1
    lw $t2, 172($t2)
    beq $t2, $zero, PRC_SCHD3   #found a ready process
    j PRC_SCHD1
PRC_SCHD3:
    srl $s0, $t1, 8             #get process id
    lw $t2, CUR_PROC_OFF($fp)
    beq $t2, $s0, PRC_SCHDEND   #no need to switch

    #calc physical gdt and write to c0
    lli $t2, 0x01800000
    sub $t2, $t3, $t2
    add $t2, $t2, $t1
    mtc0 $t2, $0
    
    jal FLUSH_REGS

    #restore fp
    SETFRMLB PROC
    sw $s0, CUR_PROC_OFF($fp)
    
    jal FETCH_REGS

PRC_SCHDEND:
    lw $ra, 0($sp)
    lw $s0, 4($sp)
    addi $sp, $sp, 8
    jr $ra
}