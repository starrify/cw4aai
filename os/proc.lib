.inc "../lib/string.lib"
.inc "proc.inc"

.def CUR_PROC_OFF {0}
.def MAX_PROC_OFF {4}
.def PROC_INFO_OFF {8}
.static {
PROC:
CUR_PROC:
    .0
MAX_PROC:
    .0
PROC_INFO:
    .inc "procinfo.b"
REGS_BUF:
    .dup 36 .0  #32w:gpr, 1w:epc, 1w:hi, 1w:lo, 1w:reserved
}

#store registers to REGS_BUF
.def cache_regs {
    wrpgpr $fp, $fp
    lla $fp, REGS_BUF
    #store gpr
    .loop 0 31 /
    sw $<LOOPVAR>, (<LOOPVAR> * 4)($fp)
    /
    wrpgpr $at, $at
    #store epc, hi, lo
    mfc0 $at, $1
    sw $at, 128($fp)
    mfhi $at
    sw $at, 132($fp)
    addi $fp, $fp, 4
    mflo $at
    sw $at, 136($fp)
    
    lla $at, REGS_BUF
    rdpgpr $fp, $fp
    sw $fp, 120($at)
    rdpgpr $at, $at
}

.decl func scope(syscall.lib) {
FLUSH_REGS: #a0:pid
    addi $sp, $sp, -4
    sw $ra, 0($sp)
    #suppose gpr is already stored in REGS_BUF by shade_gpr
    SETFRMLB PROC
    #dst: a0=proc_info + pid * 256 + 192word
    addi $t0, $fp, PROC_INFO_OFF
    sll $a0, $a0, PROC_INFO_LOG_SIZE     #256 * 4 bytes
    add $a0, $a0, $t0
    addi $a0, $a0, REGS_OFF_PER_PROC   # +192word to regs
    #src: a1 = regs_buf
    lla $a1, REGS_BUF
    #word_cnt: a2 = 35, including gpr, epc, hi, lo
    ori $a2, $zero, REGS_CNT

    jal MEMWORDCPY

    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra
}

#load regs from REGS_BUF
.def restore_regs {
    lla $31, REGS_BUF
    #restore epc, hi, lo
    lw $t0, 128($31)
    mtc0 $t0, $1
    lw $t0, 132($31)
    mthi $t0
    lw $t0, 136($31)
    mtlo $t0
    #restore gpr
    .loop 0 30 /
    lw $<LOOPVAR>, (<LOOPVAR> * 4)($31)
    /
    wrpgpr $t0, $t0
    lla $t0, REGS_BUF
    lw $31, 124($t0)
    rdpgpr $t0, $t0
}

.decl func scope() {
FETCH_REGS: #a0:pid
    addi $sp, $sp, -4
    sw $ra, 0($sp)

    SETFRMLB PROC
    #src: a1=proc_info + cur_proc * 256 + 192words
    or $a1, $zero, $a0                  #a1=pid
    sll $a1, $a1, PROC_INFO_LOG_SIZE    #256 * 4 bytes
    addi $t0, $fp, PROC_INFO_OFF
    add $a1, $a1, $t0
    addi $a1, $a1, REGS_OFF_PER_PROC    #192 * 4 bytes
    #dst: a0 = regs_buf
    lla $a0, REGS_BUF
    #word_cnt: a2 = 35, including gpr, epc, hi, lo
    ori $a2, $zero, REGS_CNT            #35
    
    jal MEMWORDCPY

    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra
}

.decl func scope(interrupt.lib) {
PROC_SCHEDULE:
    addi $sp, $sp, -8
    sw $s0, 4($sp)
    sw $ra, 0($sp)
    
    SETFRMLB PROC
    addi $t0, $fp, PROC_INFO_OFF
    lw $t3, MAX_PROC_OFF($fp)
    sll $t3, $t3, PROC_INFO_LOG_SIZE             #max_proc * 64 * 4
    
    lw $t1, CUR_PROC_OFF($fp)
    sll $t1, $t1, PROC_INFO_LOG_SIZE
PRC_SCHD1:
    #move to next process
    addi $t1, $t1, PROC_INFO_SIZE
    ble $t1, $t3, PRC_SCHD2
    and $t1, $zero, $zero
PRC_SCHD2:
    addi $t3, $fp, PROC_INFO_OFF
    #get process state
    add $t2, $t3, $t1
    lw $t2, PROC_STATE_OFF_PER_PROC($t2)
    beq $t2, $zero, PRC_SCHD3                   #found a ready process
    j PRC_SCHD1
PRC_SCHD3:
    srl $s0, $t1, PROC_INFO_LOG_SIZE            #get process id
    lw $t2, CUR_PROC_OFF($fp)
    beq $t2, $s0, PRC_SCHDEND   #no need to switch

    #calc physical gdt and write to c0
    lli $t2, SYS_VIR_ADDR
    sub $t2, $t3, $t2
    add $t2, $t2, $t1
    mtc0 $t2, $0

    lw $a0, CUR_PROC_OFF($fp)
    jal FLUSH_REGS

    #restore fp
    SETFRMLB PROC
    sw $s0, CUR_PROC_OFF($fp)

    lw $a0, CUR_PROC_OFF($fp)
    jal FETCH_REGS

PRC_SCHDEND:
    lw $ra, 0($sp)
    lw $s0, 4($sp)
    addi $sp, $sp, 8
    jr $ra
}

.decl func scope(interrupt.lib) {
PROC_FORK:
    addi $sp, $sp, -8
    sw $ra, 0($sp)
    sw $s0, 4($sp)

    SETFRMLB PROC

    lw $s0, MAX_PROC_OFF($fp)           #s0 reserved as new PROC_ID

    #change MAX_PROC without overflow check
    addi $s0, $s0, 1
    sw $s0, MAX_PROC_OFF($fp)

    addi $t0, $fp, PROC_INFO_OFF
    #init proc state, parent_pid
    #proc_id * 256w
    sll $t1, $s0, PROC_INFO_LOG_SIZE
    add $t1, $t0, $t1
    sw $zero, PROC_STATE_OFF_PER_PROC($t1)      #state = 0
    lw $t2, CUR_PROC_OFF($fp)
    sw $t2, PROC_PARENT_PID_OFF_PER_PROC($t1)
    #add active_child_cnt of cur proc
    sll $t1, $t2, PROC_INFO_LOG_SIZE
    add $t1, $t0, $t1
    lw $t3, PROC_ACTIVE_CHILD_CNT_OFF_PER_PROC($t1)
    addi $t3, $t3, 1
    sw $t3, PROC_ACTIVE_CHILD_CNT_OFF_PER_PROC($t1)
    
    #copy current process to the new one
    #copy userspace using dma
    sll $t2, $t2, PROC_USRSPACE_LOG_SIZE
    sll $t0, $s0, PROC_USRSPACE_LOG_SIZE
    SETFRM_SYSINFO
    sw $t0, DMA_DST_ADDR($fp)
    sw $t2, DMA_SRC_ADDR($fp)
    lli $t0, 0x800000                           #8M
    sw $t0, DMA_SIZE($fp)
    ori $t0, $zero, 1
    sw $t0, DMA_ENABLE($fp)
    #save values of registers
    #set ret value for child proc
    SETFRMLB REGS_BUF
    sw $zero, 8($fp)
    or $a0, $zero, $s0
    jal FLUSH_REGS
    #set ret value for parent proc
    or $v0, $zero, $s0
    #SETFRMLB REGS_BUF
    #sw $s0, 8($fp)

PROC_FRKEND:
    lw $ra, 0($sp)
    lw $s0, 4($sp)
    addi $sp, $sp, 8

    #returns value
    and $k1, $zero, $zero
    jr $ra
}

.decl func scope(interrupt.lib) {
PROC_EXEC:
    addi $sp, $sp, -4
    sw $ra, 0($sp)

    SETFRMLB PROC
    lw $t0, CUR_PROC_OFF($fp)
    #no need to set proc state
    #load code and static data from hd
    SETFRM_SYSINFO
    sll $t2, $t0, PROC_USRSPACE_LOG_SIZE
    sw $t2, HDD_SPMO($fp)
    sll $a0, $a0, 12    # a0 * 0x1000
    sw $a0, HDD_SSN($fp)
    ori $t2, $zero, 0x1000
    sw $t2, HDD_MAX_TSIZE($fp)
    ori $t2, $zero, 1
    sw $t2, HDD_ENABLE($fp)
    #reset regs
    SETFRMLB REGS_BUF
    or $a0, $zero, $fp
    and $a1, $zero, $zero
    ori $a2, $zero, REGS_CNT            #35 regs
    jal MEMWORDSET
    #set sp
    SETFRMLB REGS_BUF
    lli $t0, PROC_USRSPACE_SIZE
    sw $t0, 116($fp)

    lw $ra, 0($sp)
    addi $sp, $sp, 4

    ori $k1, $zero, 1
    jr $ra
}

.decl func scope(interrupt.lib) {
PROC_WAIT:
    addi $sp, $sp, -4
    sw $ra, 0($sp)
    
    SETFRMLB PROC
    lw $t0, CUR_PROC_OFF($fp)
    sll $t1, $t0, PROC_INFO_LOG_SIZE
    addi $t2, $fp, PROC_INFO_OFF
    add $t1, $t2, $t1
    lw $t2, PROC_ACTIVE_CHILD_CNT_OFF_PER_PROC($t1)
    
    beq $t2, $zero, PRC_WAITEND

    ori $t2, $zero, PROC_SUSPENDED
    sw $t2, PROC_STATE_OFF_PER_PROC($t1)
    jal PROC_SCHEDULE
    
PRC_WAITEND:
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra
}

.decl func scope(interrupt.lib) {
PROC_EXIT:
    addi $sp, $sp, -4
    sw $ra, 0($sp)
    sllv $zero, $zero, $zero #dbg symbol
    SETFRMLB PROC
    lw $t0, CUR_PROC_OFF($fp)
    sll $t1, $t0, PROC_INFO_LOG_SIZE
    addi $t2, $fp, PROC_INFO_OFF
    add $t1, $t2, $t1
    #set exit state of cur proc
    ori $t2, $zero, PROC_EXITED
    sw $t2, PROC_STATE_OFF_PER_PROC($t1)
    #get parent proc id
    lw $t1, PROC_PARENT_PID_OFF_PER_PROC($t1)
    #from now on t0 is curprocid, t1 is parentprocid
    #minus active_child_cnt of parent by 1
    sll $t2, $t1, PROC_INFO_LOG_SIZE
    addi $t3, $fp, PROC_INFO_OFF
    add $t2, $t2, $t3
    lw $t3, PROC_ACTIVE_CHILD_CNT_OFF_PER_PROC($t2)
    addi $t3, $t3, -1
    sw $t3, PROC_ACTIVE_CHILD_CNT_OFF_PER_PROC($t2)
    bne $t3, $zero, PRC_EXIT1
    #activate father
    sw $zero, PROC_STATE_OFF_PER_PROC($t2)
    
PRC_EXIT1:
    jal PROC_SCHEDULE

PRC_EXITEND:
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra
}
