.inc "syscall.inc"
.inc "syscall.lib"
.inc "sysinfo.inc"
.inc "proc.lib"

#default interrupt handlers
.decl func scope() {
INT_SYSCALL:
    #syscall follows calling conventions, so there's no need to shade and restore gpr
    #use user stack instead of system stack
    
    #shade_gpr

    #at most 4 instructions for each block
    sll $k0, $k0, 4
    lla $t0, INT_SSC1
    add $k0, $k0, $t0
    jr $k0
INT_SSC1:
    #case 0
    .dup 4 .0
    #case 1: gotoxy
    jal SYS_GOTOXY #sll 0, 0, 0
    j INT_SSCLEND #sll 0, 0, 0
    #case 2: getxy
    jal SYS_GETXY #sll 0, 0, 0
    j INT_SSCLEND #sll 0, 0, 0
    #case 3: putc
    jal SYS_PUTC
    j INT_SSCLEND
    #case 4: getc
    jal SYS_GETC #sll 0, 0, 0
    j INT_SSCLEND #sll 0, 0, 0
    #case 5-9: reserved
    .dup 20 .0
    #case 10: fork
    jal SYS_FORK
    j INT_SSCLEND
    #case 11: exec
    jal SYS_EXEC
    j INT_SSCLEND
INT_SSCLEND:
    #restore_gpr
    eret
}

.decl func scope() {
INT_TIMER:
    cache_regs
    lli $sp, SYS_STACK_INIT

    jal PROC_SCHEDULE

    restore_regs
    eret
}

.decl func scope(main file) {
INT_INIT:
    #interrupt handler for keyboard
    lli $t0, 0x42000018  #eret
    swia $t0, 0x80, 0
    #interrupt handler for syscall
    lla $t0, INT_SYSCALL
    srl $t0, $t0, 2
    lui $t1, 0x0800
    or $t0, $t0, $t1
    swia $t0, 0x180, 0
    lli $t0, 0x40802000 #mtc0 $zero, $4: enable mmu
    swia $t0, 0x184, 0
    #interrupt handler for timer
    lla $t0, INT_TIMER
    srl $t0, $t0, 2
    lui $t1, 0x0800
    or $t0, $t0, $t1
    swia $t0, 0x100, 0
    lli $t0, 0x40802000 #mtc0 $zero, $4: enable mmu
    swia $t0, 0x104, 0
    jr $ra
}