.inc "syscall.inc"
.inc "var.inc"
.inc "pseudo_inst.inc"
.inc "syscall.lib"

.def LIB_INBUF_SIZE {4096}
.def LIB_INBUF_START {0}
.def LIB_INBUF_END {4}
.def LIB_INBUF_BASE {8}
.static {
LIB_INBUF:
    .0
    .0
    .dup 1000 .0
}

.decl func {
PUTC: #ch
    addi $sp, $sp, -4
    sw $ra, 0($sp)
    
    ori $t0, $zero, 10
    beq $a0, $t0, PTC_NL

    jal SYS_PUTC
    j PTCEND
PTC_NL:
    jal SYS_GETXY
    #move to next line and wrap
    or $a0, $zero, $v0
    ori $a1, $zero, SCR_WIDTH - 1
    jal SYS_GOTOXY
    jal SYS_CURSORNEXT
    j PTCEND
PTCEND:
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra
}

.decl func {
GETC:
GTCBLK:
    SETFRMLB LIB_INBUF
    lw $t0, LIB_INBUF_START($fp)
    lw $1, LIB_INBUF_END($fp)
    beq $t0, $t1, GTCBLK

    #read from lib buf
    lw $t1, LIB_INBUF_BASE($fp)
    add $t1, $t0, $t1
    lw $v0, 0($t1)
    
    #move lib buf start
    addi $t0, $t0, 1
    ori $t1, $zero, LIB_INBUF_SIZE
    bne $t0, $t1, GTC1
    and $t0, $zero, $zero
GTC1:
    sw $t0, LIB_INBUF_START($fp)

    jr $ra
}

.decl func {
PUSHC:
    SETFRMLB LIB_INBUF
    lw $t0, LIB_INBUF_END($fp)
    lw $t1, LIB_INBUF_BASE($fp)
    add $t1, $t1, $t0
    sw $a0, 0($t1)
    addi $t0, $t0, 4
    ori $t1, $zero, LIB_INBUF_SIZE
    bne $t0, $t1, PSC1
    and $t0, $zero, $zero
PSC1:
    lw $t1, LIB_INBUF_START($fp)
    beq $t0, $t1, PSCERR
    sw $t0, LIB_INBUF_END($fp)
    and $v0, $zero, $zero
    j PSCEND
PSCERR:
    addi $v0, $zero, -1
PSCEND:
    jr $ra
}

.decl func {
PUTS: #pt
    addi $sp, $sp, -8
    sw $ra, 4($sp)
    sw $s0, 0($sp)
    
	add $s0, $zero, $a0
PTSLP:
    lw $a0, 0($s0)
	beq $a0, $zero, PTSEND
	jal PUTC
	addi $s0, $s0, 1
	j PTSLP

PTSEND:
    lw $s0, 0($sp)
    lw $ra, 4($sp)
    addi $sp, $sp, 8
    jr $ra
}

.decl func {
GETS: #pt
    addi $sp, $sp, -8
    sw $ra, 4($sp)
    sw $s0, 0($sp)
    
    ori $t0, $zero, 10
    add $s0, $zero, $a0
GTSLP:
    jal GETC
    beq $v0, $t0, GTSEND
    sw $v0, 0($s0)
    addi $s0, $s0, 1
    j GTSLP

GTSEND:
    #add trailing zero
    sw $zero, 0($s0)

    add $v0, $zero, $s0
    lw $s0, 0($sp)
    lw $ra, 4($sp)
    addi $sp, $sp, 8
    jr $ra
}

