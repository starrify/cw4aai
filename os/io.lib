.inc "syscall.inc"
.inc "var.inc"
.inc "pseudo_inst.inc"
.inc "syscall.lib"

.static {
LIB_INBUF: #1word start_offset, 1word end_offset, 998words buffer
    .dup 1000 .0
}

.decl func {
PUTC: #ch
    addi $sp, $sp, 4
    sw $ra, 0($sp)
    
    ori $t0, $zero, 10
    beq $a0, $t0, PTC_NL

    jal SYS_PUTC
PTC_NL:
    SETFRM_SYSINFO
    lw $t0, CURSOR($fp)
    #calc bytes per line
    ori $t1, $zero, SCR_WIDTH
    sll $t1, $t1, 2
    #get cur line
    divu $t0, $t1
    mflo $t0
    #move to next line and wrap
    addi $a0, $t0, 1
    ori $t0, $zero, SCR_HEIGHT
    bne $a0, $t0, PTC1
    and $a0, $zero, $zero
PTC1:
    and $a1, $zero, $zero
    jal SYS_GOTOXY
    jal SYS_TEST_AND_SCROLL
    
PTCEND:
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra
}

.decl func {
GETC:
GTCBLK:
    OSVAR_L $t0, LIB_INBUF_START
    OSVAR_L $t1, LIB_INBUF_END
    beq $t0, $t1, GTCBLK

    #read from lib buf
    OSVAR_L $t1, LIB_INBUF_BASE
    add $t1, $t0, $t1
    lw $v0, 0($t1)
    
    #move lib buf start
    addi $t0, $t0, 1
    ori $t1, $zero, LIB_INBUF_SIZE
    blt $t0, $t1, GTC1
    addi $t0, $t0, -LIB_INBUF_SIZE
GTC1:
    OSVAR_S $t0, LIB_INBUF_START

    jr $ra
}

.decl func {
PUTS: #pt
    addi $sp, $sp, -8
    sw $ra, 4($sp)
    sw $s0, 0($sp)
    
	add $s0, $zero, $a0
PTSLP:
    lw $a0, 0($s0)
	beq $a0, $zero, PTSEND
	jal PUTC
	addi $s0, $s0, 1
	j PTSLP

PTSEND:
    lw $s0, 0($sp)
    lw $ra, 4($sp)
    addi $sp, $sp, 8
    jr $ra
}

.decl func {
GETS: #pt
    addi $sp, $sp, -8
    sw $ra, 4($sp)
    sw $s0, 0($sp)
    
    ori $t0, $zero, 10
    add $s0, $zero, $a0
GTSLP:
    jal GETC
    beq $v0, $t0, GTSEND
    sw $v0, 0($s0)
    addi $s0, $s0, 1
    j GTSLP

GTSEND:
    #add trailing zero
    sw $zero, 0($s0)

    add $v0, $zero, $s0
    lw $s0, 0($sp)
    lw $ra, 4($sp)
    addi $sp, $sp, 8
    jr $ra
}

