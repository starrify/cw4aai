.inc "../lib/string.lib"
.inc "../lib/io.lib"

.static {
SH_PROMPT:
    .str "[root@localhost]\x23 "
SH_PROMPT_CMDNF:
    .str ": command not found\n"
SH_STR_EXEC:
    .str "exec"
SH_STR_ECHO:
    .str "echo"
SH_MSG_FILE_NOT_FOUND:
    .str " : file not found\n"
}

#tool string functions
.decl func scope() {
SKIP_BLANK:
    ori $t4, $zero, 32  #blank
    or $v0, $zero, $a0
SKP_BLANK_LP:
    lw $t0, 0($v0)
    andi $t0, $t0, 0xff
    bne $t0, $t4, SKP_BLANKEND
    addi $v0, $v0, CHAR_SIZE
    j SKP_BLANK_LP
    
SKP_BLANKEND:
    jr $ra
}

.decl func scope() {
CHOMP:
    addi $sp, $sp, -8
    sw $ra, 0($sp)
    sw $s0, 4($sp)

    or $s0, $zero, $a0
    jal STRLEN
    sll $t1, $v0, 2     #charsize = 4!!!
    add $t1, $t1, $s0

    ori $t4, $zero, 10  #\n
    addi $t1, $t1, -CHAR_SIZE   #the last char
    lw $t0, 0($t1)
    andi $t0, $t0, 0xff
    bne $t0, $t4, CHOMPEND
    sw $zero, 0($t1)    #remove the trailing \n

CHOMPEND:
    lw $ra, 0($sp)
    lw $s0, 4($sp)
    addi $sp, $sp, 8
    jr $ra
}

#impletation of commands
.decl func scope() {
SH_ECHO:
    addi $sp, $sp, -8
    sw $ra, 0($sp)
    sw $s0, 4($sp)

    jal SKIP_BLANK
    or $s0, $zero, $v0

    or $a0, $zero, $s0
    jal PUTS
    ori $a0, $zero, 10
    jal PUTC
    
    lw $ra, 0($sp)
    lw $s0, 4($sp)
    addi $sp, $sp, 8
    jr $ra
}

.decl func scope() {
SH_EXEC:
    addi $sp, $sp, -24
    sw $ra, 0($sp)
    sw $s0, 4($sp)
    sw $s1, 8($sp)
    #preproc sucks ^^!
    .def LOCAL_SH_EXEC_FILEINFO_OFF / 12 / #3 words
    
    jal SKIP_BLANK
    or $s0, $zero, $v0
    #get fileinfo by name
    ori $k0, $zero, SC_STAT
    or $a0, $zero, $s0
    addi $a1, $sp, LOCAL_SH_EXEC_FILEINFO_OFF
    syscall
    or $s1, $zero, $v0
    lw $t0, 0($s1)
    bne $t0, $zero, SH_EXEC_FORK
    #file not found
    or $a0, $zero, $s0
    jal PUTS
    lla $a0, SH_MSG_FILE_NOT_FOUND
    jal PUTS
    j SH_EXECEND
    
SH_EXEC_FORK:
    ori $k0, $zero, SC_FORK
    syscall
    beq $v0, $zero, SH_EXEC_CLD
SH_EXEC_FATHER:
    #wait for all children to exit
    ori $k0, $zero, SC_WAIT
    syscall
    
SH_EXECEND:
    lw $ra, 0($sp)
    lw $s0, 4($sp)
    lw $s1, 8($sp)
    addi $sp, $sp, 24
    jr $ra

SH_EXEC_CLD:
    ori $k0, $zero, SC_EXEC
    lw $a0, 4($s1) #starting sector
    lw $a1, 8($s1) #size in sector
    syscall
SH_EXEC_EXECERR:
    .3  #errcode 3
    j SH_EXEC_EXECERR
}

.decl func scope(main file) {
SH_CMD:
    addi $sp, $sp, -8
    sw $ra, 0($sp)
    sw $s0, 4($sp)

    #eliminate heading spaces
    #or $a0, $zero, $a0
    jal SKIP_BLANK
    or $s0, $zero, $v0
    #eliminate trailing \n
    or $a0, $zero, $s0
    jal CHOMP

    #an empty string
    lw $t0, 0($s0)
    beq $t0, $zero, SH_NOCMD
    #exec
    lla $a1, SH_STR_EXEC
    ori $a2, $zero, 4
    or $a0, $zero, $s0
    jal STRNCMP
    beq $v0, $zero, SH_CMD_EXEC
    #echo
    lla $a1, SH_STR_ECHO
    ori $a2, $zero, 4
    or $a0, $zero, $s0
    jal STRNCMP
    beq $v0, $zero, SH_CMD_ECHO
SH_CMDNF:
    #command not found
    or $a0, $zero, $s0
    jal PUTS
    lla $a0, SH_PROMPT_CMDNF
    jal PUTS
    j SH_CMDEND
    
SH_NOCMD:
    #empty string
    j SH_CMDEND
    
SH_CMD_EXEC:
    addi $a0, $s0, CHAR_SIZE * 4
    jal SH_EXEC
    j SH_CMDEND

SH_CMD_ECHO:
    addi $a0, $s0, CHAR_SIZE * 4
    jal SH_ECHO
    j SH_CMDEND
    
SH_CMDEND:
    lw $s0, 4($sp)
    lw $ra, 0($sp)
    addi $sp, $sp, 8
    jr $ra
}
