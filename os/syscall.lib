.inc "../inc/pseudo_inst.inc"
.inc "../lib/string.lib"
.inc "sysinfo.inc"
.inc "proc.inc"
.inc "proc.lib"
.inc "sysio.lib"

.decl func scope(interrupt.lib) {
SYS_GOTOXY: #row, col
    #boundary check
    ori $t0, $zero, SCR_HEIGHT
    bgeu $a0, $t0, SYS_GXYERR
    ori $t0, $zero, SCR_WIDTH * SCR_UNIT_SIZE
    bgeu $a1, $t0, SYS_GXYERR

    #calculate cursor position
    sll $t1, $a0, 6
    sll $t0, $a0, 4
    add $t0, $t0, $t1
    add $t0, $t0, $a1
    #four bytes per unit
    sll $t0, $t0, 2

    #decide real offset
    SETFRM_SYSINFO
    lw $t1, SCR_OFFSET($fp)
    add $t0, $t0, $t1
    ori $t1, $zero, SCR_UNIT_SIZE * SCR_WIDTH * SCR_HEIGHT
    blt $t0, $t1, SYS_GXY1
    addi $t0, $t0, -SCR_UNIT_SIZE * SCR_WIDTH * SCR_HEIGHT

SYS_GXY1:
    sw $t0, CURSOR($fp)
    and $v0, $zero, $zero
    j SYS_GXYEND
    
SYS_GXYERR:
    addi $v0, $zero, -1
SYS_GXYEND:
    #returns value
    and $k1, $zero, $zero
    jr $ra
}

.decl func scope(interrupt.lib) {
SYS_GETXY:
    SETFRM_SYSINFO
    #calculate reletive cursor
    lw $t0, CURSOR($fp)
    lw $t1, SCR_OFFSET($fp)
    sub $t0, $t0, $t1
    bge $t0, $zero, SYS_GTXY1
    addi $t0, $t0, SCR_UNIT_SIZE * SCR_WIDTH * SCR_HEIGHT
SYS_GTXY1:
    ori $t1, $zero, SCR_UNIT_SIZE * SCR_WIDTH
    divu $t0, $t1
    #row = quotient
    mfhi $v0
    #colomn = remainder / 4
    mflo $v1
    srl $v1, $v1, 2
SYS_GTXYEND:
    #returns value
    and $k1, $zero, $zero
    jr $ra
}

.decl func {
SYS_CURSORNEXT:
    addi $sp, $sp, -4
    sw $ra, 0($sp)

    SETFRM_SYSINFO
    lw $t1, CURSOR($fp)
    #move cursor
    addi $t1, $t1, SCR_UNIT_SIZE
    ori $t0, $zero, SCR_UNIT_SIZE * SCR_WIDTH * SCR_HEIGHT
    bne $t1, $t0, SYS_CSNXT1
    and $t1, $zero, $zero
SYS_CSNXT1:
    sw $t1, CURSOR($fp)
    
    lw $t2, SCR_OFFSET($fp)
    bne $t1, $t2, SYS_CSNXYEND
    #scroll, t1 is the new starting row and t2 is the old
    addi $t1, $t2, SCR_UNIT_SIZE * SCR_WIDTH
    bne $t1, $t0, SYS_CSNXT2
    and $t1, $zero, $zero
SYS_CSNXT2:
    sw $t1, SCR_OFFSET($fp)
    #clear the last row
    lw $t0, SCR_BASE($fp)
    add $a0, $t0, $t2
    ori $a1, $zero, 0x20
    ori $a2, $zero, 80
    jal MEMWORDSET
SYS_CSNXYEND:
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra
}

.decl func scope(interrupt.lib) {
SYS_PUTC: #ch
    addi $sp, $sp, -4
    sw $ra, 0($sp)

    ori $at, $zero, 10
    beq $a0, $at, SYS_PTC_NL
SYS_PTC_NM:
    SETFRM_SYSINFO
    lw $t0, SCR_BASE($fp)
    lw $t1, CURSOR($fp)

    #write to disp mem
    add $t0, $t0, $t1
    #UGLY FIX!!!!!!!
    lli $t1, SYS_VIR_ADDR
    add $t0, $t0, $t1
    
    sw $a0, 0($t0)
    jal SYS_CURSORNEXT
    j SYS_PTCEND

SYS_PTC_NL:
    jal SYS_GETXY
    #move to next line and wrap
    or $a0, $zero, $v0
    ori $a1, $zero, SCR_WIDTH - 1
    jal SYS_GOTOXY
    jal SYS_CURSORNEXT
    j SYS_PTCEND
SYS_PTCEND:
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    #no return
    ori $k1, $zero, 1
    jr $ra
}

.decl func scope(interrupt.lib, io.lib, main file) {
SYS_GETC:
    SETFRMLB USR_INBUF
    lw $t0, USR_INBUF_START_OFF($fp)
    lw $t1, USR_INBUF_END_OFF($fp)
    bne $t0, $t1, SYS_GTCAVL
    #return?
    addi $v0, $zero, -1
    j SYS_GTCEND

    #block?
    #j SYS_GETC

SYS_GTCAVL:
    addi $t1, $fp, USR_INBUF_DATA_OFF
    add $t1, $t0, $t1
    lw $v0, 0($t1)
    andi $v0, $v0, 0xff
    addi $t0, $t0, USR_INBUF_UNIT_SIZE
    ori $t1, $zero, USR_INBUF_SIZE
    blt $t0, $t1, SYS_GTC1
    #addi $t0, $t0, -INBUF_SIZE
    and $t0, $zero, $zero
SYS_GTC1:
    sw $t0, USR_INBUF_START_OFF($fp)
SYS_GTCEND:
    #returns value
    and $k1, $zero, $zero
    jr $ra
}

.decl func scope() {
FIND_UNUSED_GDT_ITEM:   #gdt_vir_addr, returns first unused item addr
    ori $t0, $zero, GDT_SIZE                    #t0 reserved as GDT_SIZE
FUGI1:
    lw $t1, 12($a0)                             #load the valid flag
    beq $t1, $zero, FUGIEND                    #unused gdt item found
    addi $a0, $a0, GDT_ITEM_SIZE
    beq $a0, $t2, FUGIERR                    #no unused gdt item found
    j FUGI1
FUGIERR:
    j FUGIERR                                #don't know how to handle here, apply a forever loop
FUGIEND:
    or $v0, $zero, $a0
    jr $ra
}

.decl func scope(interrupt.lib) {
SYS_FORK:
    addi $sp, $sp, -8
    sw $ra, 0($sp)
    sw $s0, 4($sp)

    SETFRMLB PROC
    
    lw $s0, MAX_PROC_OFF($fp)           #s0 reserved as new PROC_ID

    #change MAX_PROC without overflow check
    addi $s0, $s0, 1
    sw $s0, MAX_PROC_OFF($fp)

    addi $t0, $fp, PROC_INFO_OFF
    #proc_id * 256w
    sll $t1, $s0, PROC_INFO_LOG_SIZE
    add $t1, $t0, $t1
    #init proc state
    sw $zero, PROC_STATE_OFF_PER_PROC($t1)      #state = 0

    #copy current process to the new one
    #copy userspace using dma
    lw $t1, CUR_PROC_OFF($fp)
    sll $t1, $t1, PROC_USRSPACE_LOG_SIZE
    sll $t0, $s0, PROC_USRSPACE_LOG_SIZE
    SETFRM_SYSINFO
    sw $t0, DMA_DST_ADDR($fp)
    sw $t1, DMA_SRC_ADDR($fp)
    lli $t0, 0x800000                           #8M
    sw $t0, DMA_SIZE($fp)
    ori $t0, $zero, 1
    sw $t0, DMA_ENABLE($fp)
    #save values of registers
    #set ret value for child proc
    SETFRMLB REGS_BUF
    sw $zero, 8($fp)
    or $a0, $zero, $s0
    jal FLUSH_REGS
    #set ret value for father proc
    or $v0, $zero, $s0
    #SETFRMLB REGS_BUF
    #sw $s0, 8($fp)

#SYS_FRKEND:
    lw $ra, 0($sp)
    lw $s0, 4($sp)
    addi $sp, $sp, 8

    #returns value
    and $k1, $zero, $zero
    jr $ra
}

.decl func scope(interrupt.lib) {
SYS_EXEC:
    addi $sp, $sp, -4
    sw $ra, 0($sp)
    
    SETFRMLB PROC
    lw $t0, CUR_PROC_OFF($fp)
    #no need to set proc state
    #load code and static data from hd
    SETFRM_SYSINFO
    sll $t2, $t0, PROC_USRSPACE_LOG_SIZE
    sw $t2, HDD_SPMO($fp)
    sll $a0, $a0, 12    # a0 * 0x1000
    sw $a0, HDD_SSN($fp)
    ori $t2, $zero, 0x1000
    sw $t2, HDD_MAX_TSIZE($fp)
    ori $t2, $zero, 1
    sw $t2, HDD_ENABLE($fp)
    #reset regs
    SETFRMLB REGS_BUF
    or $a0, $zero, $fp
    and $a1, $zero, $zero
    ori $a2, $zero, REGS_CNT            #35 regs
    jal MEMWORDSET
    #set sp
    SETFRMLB REGS_BUF
    lli $t0, PROC_USRSPACE_SIZE
    sw $t0, 116($fp)

    lw $ra, 0($sp)
    addi $sp, $sp, 4

    ori $k1, $zero, 1
    jr $ra
}
