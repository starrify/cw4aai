.inc "pseudo_inst.inc"
.inc "string.lib"
.inc "sysinfo.inc"
.inc "proc.lib"

.decl func scope(interrupt.lib) {
SYS_GOTOXY: #row, col
    #boundary check
    ori $t0, $zero, SCR_HEIGHT
    bgeu $a0, $t0, SYS_GXYERR
    ori $t0, $zero, SCR_WIDTH * SCR_UNIT_SIZE
    bgeu $a1, $t0, SYS_GXYERR

    #calculate cursor position
    sll $t1, $a0, 6
    sll $t0, $a0, 4
    add $t0, $t0, $t1
    add $t0, $t0, $a1
    #four bytes per unit
    sll $t0, $t0, 2

    #decide real offset
    SETFRM_SYSINFO
    lw $t1, SCR_OFFSET($fp)
    add $t0, $t0, $t1
    ori $t1, $zero, SCR_UNIT_SIZE * SCR_WIDTH * SCR_HEIGHT
    blt $t0, $t1, SYS_GXY1
    addi $t0, $t0, -SCR_UNIT_SIZE * SCR_WIDTH * SCR_HEIGHT

SYS_GXY1:
    sw $t0, CURSOR($fp)
    and $v0, $zero, $zero
    j SYS_GXYEND
    
SYS_GXYERR:
    addi $v0, $zero, -1
SYS_GXYEND:
    jr $ra
}

.decl func scope(interrupt.lib) {
SYS_GETXY:
    SETFRM_SYSINFO
    #calculate reletive cursor
    lw $t0, CURSOR($fp)
    lw $t1, SCR_OFFSET($fp)
    sub $t0, $t0, $t1
    bge $t0, $zero, SYS_GTXY1
    addi $t0, $t0, SCR_UNIT_SIZE * SCR_WIDTH * SCR_HEIGHT
SYS_GTXY1:
    ori $t1, $zero, SCR_UNIT_SIZE * SCR_WIDTH
    divu $t0, $t1
    #row = quotient
    mfhi $v0
    #colomn = remainder / 4
    mflo $v1
    srl $v1, $v1, 2
SYS_GTXYEND:
    jr $ra
}

.decl func {
SYS_CURSORNEXT:
    addi $sp, $sp, -4
    sw $ra, 0($sp)

    SETFRM_SYSINFO
    lw $t1, CURSOR($fp)
    #move cursor
    addi $t1, $t1, SCR_UNIT_SIZE
    ori $t0, $zero, SCR_UNIT_SIZE * SCR_WIDTH * SCR_HEIGHT
    bne $t1, $t0, SYS_CSNXT1
    and $t1, $zero, $zero
SYS_CSNXT1:
    sw $t1, CURSOR($fp)
    
    lw $t2, SCR_OFFSET($fp)
    bne $t1, $t2, SYS_CSNXYEND
    #scroll, t1 is the new starting row and t2 is the old
    addi $t1, $t2, SCR_UNIT_SIZE * SCR_WIDTH
    bne $t1, $t0, SYS_CSNXT2
    and $t1, $zero, $zero
SYS_CSNXT2:
    sw $t1, SCR_OFFSET($fp)
    #clear the last row
    lw $t0, SCR_BASE($fp)
    add $a0, $t0, $t2
    ori $a1, $zero, 0x20
    ori $a2, $zero, 80
    jal MEMWORDSET
SYS_CSNXYEND:
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra
}

.decl func scope(interrupt.lib) {
SYS_PUTC: #ch
    addi $sp, $sp, -4
    sw $ra, 0($sp)

    SETFRM_SYSINFO
    lw $t0, SCR_BASE($fp)
    lw $t1, CURSOR($fp)

    #write to disp mem
    add $t0, $t0, $t1
    sw $a0, 0($t0)
    jal SYS_CURSORNEXT

    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra
}

.decl func scope(interrupt.lib, io.lib, main file) {
SYS_GETC:
    SETFRM_SYSINFO
    lw $t0, INBUF_START($fp)
    lw $t1, INBUF_END($fp)
    bne $t0, $t1, SYS_GTCAVL
    #return?
    addi $v0, $zero, -1
    j SYS_GTCEND

    #block?
    #j SYS_GETC

SYS_GTCAVL:
    lw $t1, INBUF_BASE($fp)
    add $t1, $t0, $t1
    lw $v0, 0($t1)
    andi $v0, $v0, 0xff
    addi $t0, $t0, INBUF_UNIT_SIZE
    ori $t1, $zero, INBUF_SIZE
    blt $t0, $t1, SYS_GTC1
    #addi $t0, $t0, -INBUF_SIZE
    and $t0, $zero, $zero
SYS_GTC1:
    sw $t0, INBUF_START($fp)
SYS_GTCEND:
    jr $ra
}

.decl func scope(interrupt.lib) {
#only implemented as new process here
SYS_FORK:
    #store cur process
    shade_gpr
    
    SETFRMLB PROC
    lw $t0, MAX_PROC_OFF($fp)
    addi $t1, $fp, PROC_INFO_OFF
    #NOTE!!!: size of gdt may change in the future
    sll $t2, $t0, 6
    add $t1, $t1, $t2
    #set gdt of new proc
    mtc0 $t1, $0
    
}
