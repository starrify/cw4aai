
total memory: 256MB, 0x0 to 0xfffffff, wordsize 4B
system reserved memory(shell included): from 0x0 to 0x1ffffff

system image filename:
    "sys.img"
system image load base:
    0x00001000
system image entry point:
    0x00001000

Redefined CP0 registers: (we use selection 0 only):
    Use MFC0/MTC0 to access them. see the instruction set. Notice we have selection 0 only
    0: reserved
    1: EPC
        Desc: EPC, stores the address of the instruction to be resumed during
            an interrupt. stores back to PC at ERET
        Perm: R/W for software
        Init Value: undefined
    2: EXL
        Desc: Exception level, indicating the current running mode. 
            0 for normal level, 1 for exception level
        Perm: R for software
        Init Value: 0
    3: IE
        Desc: Interrupt enabled.
        Perm: R/W for software
        Init Value: 0
    4: reserved

interrupt vector table: 0x00000000 size: 0x1000
    keyboard input: 0x80
    timer: 0x100
        fixed time at about 10ms?
    syscall: 0x180

os variables: 0x1000 to 0x5fff
    lib buffer: -> 0x4ff0
        1word: lib_buf_base
        1word: lib_buf_start
        1word: lib_buf_end
        1word: reserved

os stack: 0x6000 to 0x7fff
	
sysinfo and device mapping: 0x00008000 0x007FFFFF
    R for read W for write and S for static
    
    misc: -> 0
    1word: direct memory access offset RW

    display: -> 32
        1word: RW mode chr      #/rgba
        1word: 35 screen x
        1word: 80 screen y
        1word: reserved
        4word: RS base, scr_off, cursor_off, reserved 
            (35*80, zero based, 4bytes per char, upper byte: color info, lower byte: ascii)
#       4word: RS base, reserved, cursor, reserved of mode 1
    keyboard io:  ->64
        1word: input buffer base
        1word: 0x10000, fixed size 4kB, round buffer
        1word: RW start_off R
        1word: R end_off RW
    linux_timestamp: ->96
        1word: R seconds since EPOCH
        1word: R millisecons counter
    

os memory: 0x00800000 to 0x01ffffff
    lib_in_buffer -> 0
        1024word: buffer
		
user memory: 0x02000000 to 0x0FFFFFFF
                
	
		

        void add(WORD inst);
        void addu(WORD inst);
        void sub(WORD inst);
        void subu(WORD inst);
        void slt(WORD inst);
        void sltu(WORD inst);
        void sll(WORD inst);
        void srl(WORD inst);
        void addi(WORD inst);
        void addiu(WORD inst);
        void beq(WORD inst);
        void bne(WORD inst);
        void j(WORD inst);
        void jal(WORD inst);
        void lw(WORD inst);
        void sw(WORD inst);
        void lb(WORD inst);
        void sb(WORD inst);
        void lui(WORD inst);
        void ori(WORD inst);
        void xori(WORD inst);
        void slti(WORD inst);
        void sltiu(WORD inst);
        void _and(WORD inst);
        void andi(WORD inst);
        void jalr(WORD inst);
        void jr(WORD inst);
        void nor(WORD inst);
        void _or(WORD inst);
        void _xor(WORD inst);
        void sllv(WORD inst);
        void srlv(WORD inst);
